// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/payslip/models"
	mock "github.com/stretchr/testify/mock"
)

// ReimbursementRepository is an autogenerated mock type for the ReimbursementRepository type
type ReimbursementRepository struct {
	mock.Mock
}

// FindReimbursementByEmployeeIdAndDate provides a mock function with given fields: ctx, reimbursement
func (_m *ReimbursementRepository) FindReimbursementByEmployeeIdAndDate(ctx context.Context, reimbursement *models.Reimbursement) (*models.Reimbursement, error) {
	ret := _m.Called(ctx, reimbursement)

	if len(ret) == 0 {
		panic("no return value specified for FindReimbursementByEmployeeIdAndDate")
	}

	var r0 *models.Reimbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reimbursement) (*models.Reimbursement, error)); ok {
		return rf(ctx, reimbursement)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reimbursement) *models.Reimbursement); ok {
		r0 = rf(ctx, reimbursement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reimbursement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Reimbursement) error); ok {
		r1 = rf(ctx, reimbursement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertReimbursement provides a mock function with given fields: ctx, reimbursement
func (_m *ReimbursementRepository) InsertReimbursement(ctx context.Context, reimbursement *models.Reimbursement) (*models.Reimbursement, error) {
	ret := _m.Called(ctx, reimbursement)

	if len(ret) == 0 {
		panic("no return value specified for InsertReimbursement")
	}

	var r0 *models.Reimbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reimbursement) (*models.Reimbursement, error)); ok {
		return rf(ctx, reimbursement)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reimbursement) *models.Reimbursement); ok {
		r0 = rf(ctx, reimbursement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reimbursement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Reimbursement) error); ok {
		r1 = rf(ctx, reimbursement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReimbursementRepository creates a new instance of ReimbursementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReimbursementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReimbursementRepository {
	mock := &ReimbursementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
