// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/payslip/models"
	mock "github.com/stretchr/testify/mock"
)

// OvertimeRepository is an autogenerated mock type for the OvertimeRepository type
type OvertimeRepository struct {
	mock.Mock
}

// FindOvertimeByEmployeeIdAndDate provides a mock function with given fields: ctx, overtime
func (_m *OvertimeRepository) FindOvertimeByEmployeeIdAndDate(ctx context.Context, overtime *models.Overtime) (*models.Overtime, error) {
	ret := _m.Called(ctx, overtime)

	if len(ret) == 0 {
		panic("no return value specified for FindOvertimeByEmployeeIdAndDate")
	}

	var r0 *models.Overtime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Overtime) (*models.Overtime, error)); ok {
		return rf(ctx, overtime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Overtime) *models.Overtime); ok {
		r0 = rf(ctx, overtime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Overtime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Overtime) error); ok {
		r1 = rf(ctx, overtime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOvertime provides a mock function with given fields: ctx, overtime
func (_m *OvertimeRepository) InsertOvertime(ctx context.Context, overtime *models.Overtime) (*models.Overtime, error) {
	ret := _m.Called(ctx, overtime)

	if len(ret) == 0 {
		panic("no return value specified for InsertOvertime")
	}

	var r0 *models.Overtime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Overtime) (*models.Overtime, error)); ok {
		return rf(ctx, overtime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Overtime) *models.Overtime); ok {
		r0 = rf(ctx, overtime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Overtime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Overtime) error); ok {
		r1 = rf(ctx, overtime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOvertimeRepository creates a new instance of OvertimeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOvertimeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OvertimeRepository {
	mock := &OvertimeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
