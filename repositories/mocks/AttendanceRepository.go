// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/payslip/models"
	mock "github.com/stretchr/testify/mock"
)

// AttendanceRepository is an autogenerated mock type for the AttendanceRepository type
type AttendanceRepository struct {
	mock.Mock
}

// CheckInAttendance provides a mock function with given fields: ctx, attendance
func (_m *AttendanceRepository) CheckInAttendance(ctx context.Context, attendance *models.Attendance) (*models.Attendance, error) {
	ret := _m.Called(ctx, attendance)

	if len(ret) == 0 {
		panic("no return value specified for CheckInAttendance")
	}

	var r0 *models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Attendance) (*models.Attendance, error)); ok {
		return rf(ctx, attendance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Attendance) *models.Attendance); ok {
		r0 = rf(ctx, attendance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Attendance) error); ok {
		r1 = rf(ctx, attendance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOutAttendance provides a mock function with given fields: ctx, attendance
func (_m *AttendanceRepository) CheckOutAttendance(ctx context.Context, attendance *models.Attendance) (*models.Attendance, error) {
	ret := _m.Called(ctx, attendance)

	if len(ret) == 0 {
		panic("no return value specified for CheckOutAttendance")
	}

	var r0 *models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Attendance) (*models.Attendance, error)); ok {
		return rf(ctx, attendance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Attendance) *models.Attendance); ok {
		r0 = rf(ctx, attendance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Attendance) error); ok {
		r1 = rf(ctx, attendance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAttendanceByEmployeeIdAndDate provides a mock function with given fields: ctx, attendance
func (_m *AttendanceRepository) FindAttendanceByEmployeeIdAndDate(ctx context.Context, attendance *models.Attendance) (*models.Attendance, error) {
	ret := _m.Called(ctx, attendance)

	if len(ret) == 0 {
		panic("no return value specified for FindAttendanceByEmployeeIdAndDate")
	}

	var r0 *models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Attendance) (*models.Attendance, error)); ok {
		return rf(ctx, attendance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Attendance) *models.Attendance); ok {
		r0 = rf(ctx, attendance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Attendance) error); ok {
		r1 = rf(ctx, attendance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAttendanceRepository creates a new instance of AttendanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttendanceRepository {
	mock := &AttendanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
